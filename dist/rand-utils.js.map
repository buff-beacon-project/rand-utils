{"version":3,"file":"rand-utils.js","mappings":"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","sources":["webpack://randUtils/webpack/universalModuleDefinition","webpack://randUtils/./node_modules/bit-buffer/bit-buffer.js","webpack://randUtils/webpack/bootstrap","webpack://randUtils/webpack/runtime/define property getters","webpack://randUtils/webpack/runtime/hasOwnProperty shorthand","webpack://randUtils/webpack/runtime/make namespace object","webpack://randUtils/./src/util.js","webpack://randUtils/./src/random.js","webpack://randUtils/./src/shuffle.js","webpack://randUtils/./src/bit-reader.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"randUtils\"] = factory();\n\telse\n\t\troot[\"randUtils\"] = factory();\n})(this, function() {\nreturn ","(function (root) {\n\n/**********************************************************\n *\n * BitView\n *\n * BitView provides a similar interface to the standard\n * DataView, but with support for bit-level reads / writes.\n *\n **********************************************************/\nvar BitView = function (source, byteOffset, byteLength) {\n\tvar isBuffer = source instanceof ArrayBuffer ||\n\t\t(typeof Buffer !== 'undefined' && source instanceof Buffer);\n\n\tif (!isBuffer) {\n\t\tthrow new Error('Must specify a valid ArrayBuffer or Buffer.');\n\t}\n\n\tbyteOffset = byteOffset || 0;\n\tbyteLength = byteLength || source.byteLength /* ArrayBuffer */ || source.length /* Buffer */;\n\n\tthis._view = new Uint8Array(source.buffer || source, byteOffset, byteLength);\n\n\tthis.bigEndian = false;\n};\n\n// Used to massage fp values so we can operate on them\n// at the bit level.\nBitView._scratch = new DataView(new ArrayBuffer(8));\n\nObject.defineProperty(BitView.prototype, 'buffer', {\n\tget: function () { return typeof Buffer !== 'undefined' ?  Buffer.from(this._view.buffer) : this._view.buffer; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitView.prototype, 'byteLength', {\n\tget: function () { return this._view.length; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nBitView.prototype._setBit = function (offset, on) {\n\tif (on) {\n\t\tthis._view[offset >> 3] |= 1 << (offset & 7);\n\t} else {\n\t\tthis._view[offset >> 3] &= ~(1 << (offset & 7));\n\t}\n};\n\nBitView.prototype.getBits = function (offset, bits, signed) {\n\tvar available = (this._view.length * 8 - offset);\n\n\tif (bits > available) {\n\t\tthrow new Error('Cannot get ' + bits + ' bit(s) from offset ' + offset + ', ' + available + ' available');\n\t}\n\n\tvar value = 0;\n\tfor (var i = 0; i < bits;) {\n\t\tvar remaining = bits - i;\n\t\tvar bitOffset = offset & 7;\n\t\tvar currentByte = this._view[offset >> 3];\n\n\t\t// the max number of bits we can read from the current byte\n\t\tvar read = Math.min(remaining, 8 - bitOffset);\n\n\t\tvar mask, readBits;\n\t\tif (this.bigEndian) {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << read);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\treadBits = (currentByte >> (8 - read - bitOffset)) & mask;\n\n\t\t\tvalue <<= read;\n\t\t\tvalue |= readBits;\n\t\t} else {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << read);\n\t\t\t// shift the bits we want to the start of the byte and mask off the rest\n\t\t\treadBits = (currentByte >> bitOffset) & mask;\n\n\t\t\tvalue |= readBits << i;\n\t\t}\n\n\t\toffset += read;\n\t\ti += read;\n\t}\n\n\tif (signed) {\n\t\t// If we're not working with a full 32 bits, check the\n\t\t// imaginary MSB for this bit count and convert to a\n\t\t// valid 32-bit signed value if set.\n\t\tif (bits !== 32 && value & (1 << (bits - 1))) {\n\t\t\tvalue |= -1 ^ ((1 << bits) - 1);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\treturn value >>> 0;\n};\n\nBitView.prototype.setBits = function (offset, value, bits) {\n\tvar available = (this._view.length * 8 - offset);\n\n\tif (bits > available) {\n\t\tthrow new Error('Cannot set ' + bits + ' bit(s) from offset ' + offset + ', ' + available + ' available');\n\t}\n\n\tfor (var i = 0; i < bits;) {\n\t\tvar remaining = bits - i;\n\t\tvar bitOffset = offset & 7;\n\t\tvar byteOffset = offset >> 3;\n\t\tvar wrote = Math.min(remaining, 8 - bitOffset);\n\n\t\tvar mask, writeBits, destMask;\n\t\tif (this.bigEndian) {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(~0 << wrote);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\twriteBits = (value >> (bits - i - wrote)) & mask;\n\n\t\t\tvar destShift = 8 - bitOffset - wrote;\n\t\t\t// destination mask to zero all the bits we're changing first\n\t\t\tdestMask = ~(mask << destShift);\n\n\t\t\tthis._view[byteOffset] =\n\t\t\t\t(this._view[byteOffset] & destMask)\n\t\t\t\t| (writeBits << destShift);\n\n\t\t} else {\n\t\t\t// create a mask with the correct bit width\n\t\t\tmask = ~(0xFF << wrote);\n\t\t\t// shift the bits we want to the start of the byte and mask of the rest\n\t\t\twriteBits = value & mask;\n\t\t\tvalue >>= wrote;\n\n\t\t\t// destination mask to zero all the bits we're changing first\n\t\t\tdestMask = ~(mask << bitOffset);\n\n\t\t\tthis._view[byteOffset] =\n\t\t\t\t(this._view[byteOffset] & destMask)\n\t\t\t\t| (writeBits << bitOffset);\n\t\t}\n\n\t\toffset += wrote;\n\t\ti += wrote;\n\t}\n};\n\nBitView.prototype.getBoolean = function (offset) {\n\treturn this.getBits(offset, 1, false) !== 0;\n};\nBitView.prototype.getInt8 = function (offset) {\n\treturn this.getBits(offset, 8, true);\n};\nBitView.prototype.getUint8 = function (offset) {\n\treturn this.getBits(offset, 8, false);\n};\nBitView.prototype.getInt16 = function (offset) {\n\treturn this.getBits(offset, 16, true);\n};\nBitView.prototype.getUint16 = function (offset) {\n\treturn this.getBits(offset, 16, false);\n};\nBitView.prototype.getInt32 = function (offset) {\n\treturn this.getBits(offset, 32, true);\n};\nBitView.prototype.getUint32 = function (offset) {\n\treturn this.getBits(offset, 32, false);\n};\nBitView.prototype.getFloat32 = function (offset) {\n\tBitView._scratch.setUint32(0, this.getUint32(offset));\n\treturn BitView._scratch.getFloat32(0);\n};\nBitView.prototype.getFloat64 = function (offset) {\n\tBitView._scratch.setUint32(0, this.getUint32(offset));\n\t// DataView offset is in bytes.\n\tBitView._scratch.setUint32(4, this.getUint32(offset+32));\n\treturn BitView._scratch.getFloat64(0);\n};\n\nBitView.prototype.setBoolean = function (offset, value) {\n\tthis.setBits(offset, value ? 1 : 0, 1);\n};\nBitView.prototype.setInt8  =\nBitView.prototype.setUint8 = function (offset, value) {\n\tthis.setBits(offset, value, 8);\n};\nBitView.prototype.setInt16  =\nBitView.prototype.setUint16 = function (offset, value) {\n\tthis.setBits(offset, value, 16);\n};\nBitView.prototype.setInt32  =\nBitView.prototype.setUint32 = function (offset, value) {\n\tthis.setBits(offset, value, 32);\n};\nBitView.prototype.setFloat32 = function (offset, value) {\n\tBitView._scratch.setFloat32(0, value);\n\tthis.setBits(offset, BitView._scratch.getUint32(0), 32);\n};\nBitView.prototype.setFloat64 = function (offset, value) {\n\tBitView._scratch.setFloat64(0, value);\n\tthis.setBits(offset, BitView._scratch.getUint32(0), 32);\n\tthis.setBits(offset+32, BitView._scratch.getUint32(4), 32);\n};\nBitView.prototype.getArrayBuffer = function (offset, byteLength) {\n\tvar buffer = new Uint8Array(byteLength);\n\tfor (var i = 0; i < byteLength; i++) {\n\t\tbuffer[i] = this.getUint8(offset + (i * 8));\n\t}\n\treturn buffer;\n};\n\n/**********************************************************\n *\n * BitStream\n *\n * Small wrapper for a BitView to maintain your position,\n * as well as to handle reading / writing of string data\n * to the underlying buffer.\n *\n **********************************************************/\nvar reader = function (name, size) {\n\treturn function () {\n\t\tif (this._index + size > this._length) {\n\t\t\tthrow new Error('Trying to read past the end of the stream');\n\t\t}\n\t\tvar val = this._view[name](this._index);\n\t\tthis._index += size;\n\t\treturn val;\n\t};\n};\n\nvar writer = function (name, size) {\n\treturn function (value) {\n\t\tthis._view[name](this._index, value);\n\t\tthis._index += size;\n\t};\n};\n\nfunction readASCIIString(stream, bytes) {\n\treturn readString(stream, bytes, false);\n}\n\nfunction readUTF8String(stream, bytes) {\n\treturn readString(stream, bytes, true);\n}\n\nfunction readString(stream, bytes, utf8) {\n\tif (bytes === 0) {\n\t\treturn '';\n\t}\n\tvar i = 0;\n\tvar chars = [];\n\tvar append = true;\n\tvar fixedLength = !!bytes;\n\tif (!bytes) {\n\t\tbytes = Math.floor((stream._length - stream._index) / 8);\n\t}\n\n\t// Read while we still have space available, or until we've\n\t// hit the fixed byte length passed in.\n\twhile (i < bytes) {\n\t\tvar c = stream.readUint8();\n\n\t\t// Stop appending chars once we hit 0x00\n\t\tif (c === 0x00) {\n\t\t\tappend = false;\n\n\t\t\t// If we don't have a fixed length to read, break out now.\n\t\t\tif (!fixedLength) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (append) {\n\t\t\tchars.push(c);\n\t\t}\n\n\t\ti++;\n\t}\n\n\tvar string = String.fromCharCode.apply(null, chars);\n\tif (utf8) {\n\t\ttry {\n\t\t\treturn decodeURIComponent(escape(string)); // https://stackoverflow.com/a/17192845\n\t\t} catch (e) {\n\t\t\treturn string;\n\t\t}\n\t} else {\n\t\treturn string;\n\t}\n}\n\nfunction writeASCIIString(stream, string, bytes) {\n\tvar length = bytes || string.length + 1;  // + 1 for NULL\n\n\tfor (var i = 0; i < length; i++) {\n\t\tstream.writeUint8(i < string.length ? string.charCodeAt(i) : 0x00);\n\t}\n}\n\nfunction writeUTF8String(stream, string, bytes) {\n\tvar byteArray = stringToByteArray(string);\n\n\tvar length = bytes || byteArray.length + 1;  // + 1 for NULL\n\tfor (var i = 0; i < length; i++) {\n\t\tstream.writeUint8(i < byteArray.length ? byteArray[i] : 0x00);\n\t}\n}\n\nfunction stringToByteArray(str) { // https://gist.github.com/volodymyr-mykhailyk/2923227\n\tvar b = [], i, unicode;\n\tfor (i = 0; i < str.length; i++) {\n\t\tunicode = str.charCodeAt(i);\n\t\t// 0x00000000 - 0x0000007f -> 0xxxxxxx\n\t\tif (unicode <= 0x7f) {\n\t\t\tb.push(unicode);\n\t\t\t// 0x00000080 - 0x000007ff -> 110xxxxx 10xxxxxx\n\t\t} else if (unicode <= 0x7ff) {\n\t\t\tb.push((unicode >> 6) | 0xc0);\n\t\t\tb.push((unicode & 0x3F) | 0x80);\n\t\t\t// 0x00000800 - 0x0000ffff -> 1110xxxx 10xxxxxx 10xxxxxx\n\t\t} else if (unicode <= 0xffff) {\n\t\t\tb.push((unicode >> 12) | 0xe0);\n\t\t\tb.push(((unicode >> 6) & 0x3f) | 0x80);\n\t\t\tb.push((unicode & 0x3f) | 0x80);\n\t\t\t// 0x00010000 - 0x001fffff -> 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\t\t} else {\n\t\t\tb.push((unicode >> 18) | 0xf0);\n\t\t\tb.push(((unicode >> 12) & 0x3f) | 0x80);\n\t\t\tb.push(((unicode >> 6) & 0x3f) | 0x80);\n\t\t\tb.push((unicode & 0x3f) | 0x80);\n\t\t}\n\t}\n\n\treturn b;\n}\n\nvar BitStream = function (source, byteOffset, byteLength) {\n\tvar isBuffer = source instanceof ArrayBuffer ||\n\t\t(typeof Buffer !== 'undefined' && source instanceof Buffer);\n\n\tif (!(source instanceof BitView) && !isBuffer) {\n\t\tthrow new Error('Must specify a valid BitView, ArrayBuffer or Buffer');\n\t}\n\n\tif (isBuffer) {\n\t\tthis._view = new BitView(source, byteOffset, byteLength);\n\t} else {\n\t\tthis._view = source;\n\t}\n\n\tthis._index = 0;\n\tthis._startIndex = 0;\n\tthis._length = this._view.byteLength * 8;\n};\n\nObject.defineProperty(BitStream.prototype, 'index', {\n\tget: function () { return this._index - this._startIndex; },\n\tset: function (val) { this._index = val + this._startIndex; },\n\tenumerable: true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'length', {\n\tget: function () { return this._length - this._startIndex; },\n\tset: function (val) { this._length = val + this._startIndex; },\n\tenumerable  : true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'bitsLeft', {\n\tget: function () { return this._length - this._index; },\n\tenumerable  : true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'byteIndex', {\n\t// Ceil the returned value, over compensating for the amount of\n\t// bits written to the stream.\n\tget: function () { return Math.ceil(this._index / 8); },\n\tset: function (val) { this._index = val * 8; },\n\tenumerable: true,\n\tconfigurable: true\n});\n\nObject.defineProperty(BitStream.prototype, 'buffer', {\n\tget: function () { return this._view.buffer; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitStream.prototype, 'view', {\n\tget: function () { return this._view; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nObject.defineProperty(BitStream.prototype, 'bigEndian', {\n\tget: function () { return this._view.bigEndian; },\n\tset: function (val) { this._view.bigEndian = val; },\n\tenumerable: true,\n\tconfigurable: false\n});\n\nBitStream.prototype.readBits = function (bits, signed) {\n\tvar val = this._view.getBits(this._index, bits, signed);\n\tthis._index += bits;\n\treturn val;\n};\n\nBitStream.prototype.writeBits = function (value, bits) {\n\tthis._view.setBits(this._index, value, bits);\n\tthis._index += bits;\n};\n\nBitStream.prototype.readBoolean = reader('getBoolean', 1);\nBitStream.prototype.readInt8 = reader('getInt8', 8);\nBitStream.prototype.readUint8 = reader('getUint8', 8);\nBitStream.prototype.readInt16 = reader('getInt16', 16);\nBitStream.prototype.readUint16 = reader('getUint16', 16);\nBitStream.prototype.readInt32 = reader('getInt32', 32);\nBitStream.prototype.readUint32 = reader('getUint32', 32);\nBitStream.prototype.readFloat32 = reader('getFloat32', 32);\nBitStream.prototype.readFloat64 = reader('getFloat64', 64);\n\nBitStream.prototype.writeBoolean = writer('setBoolean', 1);\nBitStream.prototype.writeInt8 = writer('setInt8', 8);\nBitStream.prototype.writeUint8 = writer('setUint8', 8);\nBitStream.prototype.writeInt16 = writer('setInt16', 16);\nBitStream.prototype.writeUint16 = writer('setUint16', 16);\nBitStream.prototype.writeInt32 = writer('setInt32', 32);\nBitStream.prototype.writeUint32 = writer('setUint32', 32);\nBitStream.prototype.writeFloat32 = writer('setFloat32', 32);\nBitStream.prototype.writeFloat64 = writer('setFloat64', 64);\n\nBitStream.prototype.readASCIIString = function (bytes) {\n\treturn readASCIIString(this, bytes);\n};\n\nBitStream.prototype.readUTF8String = function (bytes) {\n\treturn readUTF8String(this, bytes);\n};\n\nBitStream.prototype.writeASCIIString = function (string, bytes) {\n\twriteASCIIString(this, string, bytes);\n};\n\nBitStream.prototype.writeUTF8String = function (string, bytes) {\n\twriteUTF8String(this, string, bytes);\n};\nBitStream.prototype.readBitStream = function(bitLength) {\n\tvar slice = new BitStream(this._view);\n\tslice._startIndex = this._index;\n\tslice._index = this._index;\n\tslice.length = bitLength;\n\tthis._index += bitLength;\n\treturn slice;\n};\n\nBitStream.prototype.writeBitStream = function(stream, length) {\n\tif (!length) {\n\t\tlength = stream.bitsLeft;\n\t}\n\n\tvar bitsToWrite;\n\twhile (length > 0) {\n\t\tbitsToWrite = Math.min(length, 32);\n\t\tthis.writeBits(stream.readBits(bitsToWrite), bitsToWrite);\n\t\tlength -= bitsToWrite;\n\t}\n};\n\nBitStream.prototype.readArrayBuffer = function(byteLength) {\n\tvar buffer = this._view.getArrayBuffer(this._index, byteLength);\n\tthis._index += (byteLength * 8);\n\treturn buffer;\n};\n\nBitStream.prototype.writeArrayBuffer = function(buffer, byteLength) {\n\tthis.writeBitStream(new BitStream(buffer), byteLength * 8);\n};\n\n// AMD / RequireJS\nif (typeof define !== 'undefined' && define.amd) {\n\tdefine(function () {\n\t\treturn {\n\t\t\tBitView: BitView,\n\t\t\tBitStream: BitStream\n\t\t};\n\t});\n}\n// Node.js\nelse if (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = {\n\t\tBitView: BitView,\n\t\tBitStream: BitStream\n\t};\n}\n\n}(this));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// eslint-disable-next-line max-len\nconst isoDateRegExp = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/\n\n/**\n * Checks whether a datetime string is in ISO 8601 format\n * @param {String} str\n * @returns {Boolean}\n */\nexport function isISODate(str) {\n  return isoDateRegExp.test(str);\n}\n\n/**\n * zip the provided arrays together\n * @param {ArrayLike} ...arrays\n * @returns {ArrayLike}\n */\nexport function zip(...arrays) {\n  const minLen = Math.min(...arrays.map(arr => arr.length))\n  const [firstArr, ...restArrs] = arrays\n  return Array.prototype.map.call(\n    firstArr.slice(0, minLen),\n    (val, i) => [val, ...restArrs.map(arr => arr[i])]\n  )\n}\n\n/**\n * Format the input as an ISO 8601 date string\n * @param {String|Date} isoStrOrDate\n * @returns {String}\n */\nexport function getTimeStamp(isoStrOrDate){\n  if (typeof date === 'string' && isISODate(isoStrOrDate)) {\n    return isoStrOrDate\n  } else if (isoStrOrDate instanceof Date) {\n    return isoStrOrDate.toISOString()\n  }\n\n  throw new Error('Date must be an ISO compliant datetime string, or a Date instance')\n}\n\n/**\n * Convert a Uint8Array to a hex string\n * @param {Uint8Array} input\n * @returns {String}\n */\nexport function bytesToHex(buffer) {\n  return Array.prototype.map.call(buffer, x => ('00' + x.toString(16)).slice(-2)).join('')\n}\n\n/**\n * Parse hex string and return the bytes as a Uint8Array\n * @param {String} input\n * @returns {Uint8Array}\n */\nexport function hex2bytes(input){\n  if (typeof input !== 'string') {\n    throw new TypeError('Input must be a string')\n  }\n\n  const strLen = input.length\n  if ((strLen % 2) !== 0) {\n    throw new RangeError('Input string must be an even number of characters')\n  }\n\n  return Uint8Array.from({ length: strLen / 2 }, (v, i) => {\n    i *= 2\n    return parseInt(input.substring(i, i + 2), 16)\n  })\n}\n\n/**\n * Parse hex string and return the data as an array buffer\n * @param {String} input\n * @returns {ArrayBuffer}\n */\nexport function hex2buf(input) {\n  return hex2bytes(input).buffer\n}\n\n/**\n * Perform an XOR operation on two arrays\n * @param {ArrayLike} a\n * @param {ArrayLike} b\n * @returns {ArrayLike}\n */\nexport function xorArrays(a, b){\n  const out = zip(a, b).map(([x, y]) => x ^ y)\n  if (a.constructor && a.constructor.from){\n    return a.constructor.from(out)\n  }\n  return out\n}\n\n/**\n * Utility to yield results from provided function using a bitstream.\n * Stops when bitstream runs out of usable bits.\n * @example\n * // creates an array of 8 bit numbers consuming the bitStream\n * Array.from(iterBitStream(() => bitStream.readBits(8)))\n * @generator\n * @param {Function} fn\n * @yields {any}\n */\nexport function* iterBitStream(fn) {\n  let i = 0\n  try {\n    while (true) {\n      yield fn(i++)\n    }\n  } catch (e) {\n    if (e.name !== 'Error' || e.message.substr(0, 10) !== 'Cannot get') {\n      throw e\n    }\n  }\n}\n","\n/**\n * Get an unbiased \"random\" number within the range `[0, s)`. The \"random\"\n * values are read from the provided bitStream. The function attempts to read\n * as few bits as possible to achieve this.\n * @param {Number} s Upper bound (exclusive)\n * @param {BitStream} bitStream\n * @returns {Number}\n */\nexport function boundedRandom(s, bitStream) {\n  // https://arxiv.org/abs/1805.10941\n  // https://lemire.me/blog/2016/06/30/fast-random-shuffling/\n  if (s < 0 || s % 1 !== 0) { throw new Error('Value must be a positive integer >= 2') }\n  if (s < 2) { return 0 }\n  const log2s = Math.log2(s)\n  const nbits = Math.ceil(log2s)\n  const max = 1 << nbits\n  if (!Number.isSafeInteger(max * (s - 1))) {\n    throw new Error('Range is too high to evaluate')\n  }\n\n  if (log2s % 1 === 0) {\n    // is whole... so we can just read bits\n    // without filtering\n    return bitStream.readBits(nbits, false)\n  }\n\n  let x = bitStream.readBits(nbits, false)\n  let m = x * s\n  let l = m % max\n  if (l < s) {\n    const threshold = (max - s) % s\n    while (l < threshold) {\n      x = bitStream.readBits(nbits, false)\n      m = x * s\n      l = m % max\n    }\n  }\n  return m >> nbits\n}\n","import { iterBitStream } from './util.js'\nimport { boundedRandom } from './random.js'\n\n/**\n * Return an array fully filled with bounded random values appropriate\n * to shuffle a list. The maximum sized list that can be shuffled is\n * the size of the returned seed array + 1\n * @param {BitStream} bitStream\n * @returns {Array}\n */\nexport const getShuffleSeed = (bitStream) => {\n  return Array.from(\n    iterBitStream((s) => boundedRandom(s + 2, bitStream))\n  )\n}\n\nconst arraySwap = (arr, i, j) => {\n  if (i === j) { return }\n  [arr[i], arr[j]] = [arr[j], arr[i]]\n}\n\n/**\n * Shuffle provided array **in place** using the given shuffle seed.\n * @see {@link getShuffleSeed}\n * @param {Array} array\n * @param {Array} shuffleSeed\n * @returns {Array}\n */\nexport function shuffleSelf(array, shuffleSeed) {\n  const size = array.length\n  if (!size) { return array }\n  if (size > shuffleSeed.length + 1) {\n    throw new Error(`Insufficient sized seed to shuffle this array. Max length: ${shuffleSeed.length + 1}`)\n  }\n  for (let i = size; i > 1; i--) {\n    const r = shuffleSeed[i - 2]\n    // swap values at i-1 and r\n    arraySwap(array, i - 1, r)\n  }\n  return array\n}\n\n/**\n * Get a shuffled copy of provided array using the given shuffle seed.\n * @see {@link getShuffleSeed}\n * @param {Array} array\n * @param {Array} shuffleSeed\n * @returns {Array}\n */\nexport function shuffle(array, shuffleSeed) {\n  return shuffleSelf(array.slice(), shuffleSeed)\n}\n","import { iterBitStream } from './util.js'\nimport { getShuffleSeed, shuffle, shuffleSelf } from './shuffle.js'\nimport { BitStream, BitView } from 'bit-buffer'\n\n/**\n * Helper class to read bits from pulse value.\n * **Note**: it is recommended to use `BitReader.from()`\n * @see {@link BitReader.from}\n * @param {ArrayBuffer} buffer\n */\nexport class BitReader {\n  /**\n   * Create a BitReader from a TypedArray or ArrayBuffer\n   * @returns {BitReader}\n   */\n  static from(arr){\n    if (arr instanceof ArrayBuffer){\n      return new BitReader(arr)\n    } else if (arr.buffer){\n      return new BitReader(arr.buffer)\n    } else {\n      throw new Error('Unsupported format')\n    }\n  }\n\n  constructor(buffer) {\n    if (!(buffer instanceof ArrayBuffer)) {\n      throw new Error('Value passed to constructor is not an ArrayBuffer')\n    }\n    this.buffer = buffer\n    this._shuffleSeed = null\n  }\n\n  /**\n   * The shuffleSeed for the data.\n   * @see {getShuffleSeed}\n   */\n  get shuffleSeed() {\n    if (!this._shuffleSeed) {\n      this._shuffleSeed = getShuffleSeed(this.stream())\n    }\n    return this._shuffleSeed\n  }\n\n  /**\n   * The maximum length of list this instance can shuffle.\n   * @see {getShuffleSeed}\n   */\n  get maxShuffleLength() {\n    return this.shuffleSeed.length + 1\n  }\n\n  /**\n   * Get a DataView of the bits.\n   * @param {Number} byteOffset\n   * @param {Number} byteLength\n   * @returns {DataView}\n   */\n  dataView(byteOffset, byteLength) {\n    return new DataView(this.buffer, byteOffset, byteLength)\n  }\n\n  /**\n   * Get a BitStream of this data.\n   * @see {@link https://github.com/inolen/bit-buffer}\n   * @returns {BitStream}\n   */\n  stream() {\n    return new BitStream(this.buffer)\n  }\n\n  /**\n   * Get a BitView of this data.\n   * @see {@link https://github.com/inolen/bit-buffer}\n   * @returns {BitView}\n   */\n  view() {\n    return new BitView(this.buffer)\n  }\n\n  /**\n   * Return a shuffled copy of provided array.\n   * @param {Array} array\n   * @returns {Array}\n   */\n  shuffled(array) {\n    return shuffle(array, this.shuffleSeed)\n  }\n\n  /**\n   * Shuffle the provided array in place, modifying it.\n   * @param {Array} array\n   * @returns {Array}\n   */\n  applyShuffle(array) {\n    shuffleSelf(array, this.shuffleSeed)\n  }\n\n  /**\n   * Use given function to read a BitStream and generate array elements.\n   * @example\n   * // generate a list of boolean values\n   * const reader = BitReader.from(pulse)\n   * const toggles = reader.unfold((stream) => stream.readBoolean())\n   * @see {@link https://github.com/inolen/bit-buffer}\n   * @param {UnfoldCallback} fn\n   * @param {class} cls=Array\n   * @returns {ArrayLike}\n   */\n  unfold(fn, cls = Array) {\n    const stream = this.stream()\n    return cls.from(iterBitStream((i) => fn(stream, i)))\n  }\n  /**\n   * @name UnfoldCallback\n   * @param {BitStream} stream\n   * @param {Number} index\n   * @returns {any}\n   */\n}\n"],"names":["root","factory","exports","module","define","amd","this","BitView","source","byteOffset","byteLength","ArrayBuffer","Buffer","Error","length","_view","Uint8Array","buffer","bigEndian","_scratch","DataView","Object","defineProperty","prototype","get","from","enumerable","configurable","_setBit","offset","on","getBits","bits","signed","available","value","i","remaining","bitOffset","currentByte","read","Math","min","setBits","mask","writeBits","destMask","wrote","destShift","getBoolean","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","setUint32","getFloat64","setBoolean","setInt8","setUint8","setInt16","setUint16","setInt32","setFloat32","setFloat64","getArrayBuffer","reader","name","size","_index","_length","val","writer","readString","stream","bytes","utf8","chars","append","fixedLength","floor","c","readUint8","push","string","String","fromCharCode","apply","decodeURIComponent","escape","e","BitStream","isBuffer","_startIndex","set","ceil","readBits","readBoolean","readInt8","readInt16","readUint16","readInt32","readUint32","readFloat32","readFloat64","writeBoolean","writeInt8","writeUint8","writeInt16","writeUint16","writeInt32","writeUint32","writeFloat32","writeFloat64","readASCIIString","readUTF8String","writeASCIIString","charCodeAt","writeUTF8String","byteArray","str","unicode","b","stringToByteArray","readBitStream","bitLength","slice","writeBitStream","bitsToWrite","bitsLeft","readArrayBuffer","writeArrayBuffer","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","d","definition","key","o","obj","prop","hasOwnProperty","r","Symbol","toStringTag","iterBitStream","fn","message","substr","boundedRandom","s","bitStream","log2s","log2","nbits","max","Number","isSafeInteger","x","m","l","threshold","getShuffleSeed","Array","arraySwap","arr","j","shuffleSelf","array","shuffleSeed","shuffle","BitReader","constructor","_shuffleSeed","maxShuffleLength","dataView","view","shuffled","applyShuffle","unfold","cls"],"sourceRoot":""}